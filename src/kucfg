#!/bin/bash

project="$(basename $0)"
version="0.1.0"

usage="\
Usage: $project version|list|current|set <config>\n\
Shortcuts:\n\
    l|ls  list\n\
    c|cur current\n\
    s     set\n\
    v     version"

config_dir="$HOME/.$project"
config_extension="conf"

kube_config_dir="$HOME/.kube"
kube_config_file="$kube_config_dir/config"

command="$1"
config_name="$2"

function usage {
    echo -e "$usage"
    exit 2
}

function version {
    echo "$version"
}

function list {
    ls -1 "$config_dir" | cut -d. -f1
}

function current {
    if [ ! -L "$kube_config_file" ]; then
        echo "Current configuration is not set."
        echo "Please use the \"$project set <config>\" command."
        exit 1
    fi
    basename $(readlink $kube_config_file) | cut -d. -f1
    check_kube_config_env
}

function set {
    config_name="$1"

    if [[ -f "$kube_config_file" && ! -L "$kube_config_file" ]]; then
        echo "\"$kube_config_file\" is not a symbolic link. "
        echo "Please backup (if needed) and remove it."
        exit 1
    fi
    if [ -z "$config_name" ]; then usage; fi

    config_file="$config_dir/$config_name.$config_extension"
    if [ ! -f "$config_file" ]; then
        echo "$config_file not found"
        exit 1
    fi
    ln -sf "$config_file" "$kube_config_file"
    check_kube_config_env
}

function check_kube_config_env {
    kube_config_env="$(env | grep KUBECONFIG)"
    if [ -n "$kube_config_env" ]; then
        echo "Warning: \"$kube_config_env\" overrides the $project settings"
    fi
}

if [ -z "$command" ]; then usage; fi

case "$command" in
    l|ls|list) list ;;
    c|cur|current) current ;;
    s|set) set $config_name ;;
    v|version) version ;;
    *) usage ;;
esac
